package siat.multimedia.algorithm;

import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.util.LinkedList;
import java.util.List;

import org.opencv.R;
import org.opencv.android.Utils;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.Rect;
import org.opencv.core.Scalar;
import org.opencv.core.Size;
import org.opencv.objdetect.CascadeClassifier;

import android.content.Context;
import android.graphics.Bitmap;
import android.util.Log;
import android.view.SurfaceView;

public class FaceAlgorithmBase extends SurfaceView{
	private static final String TAG = "Sample::Algorithm";
	protected CascadeClassifier mCascade;
	protected static float minFacesize=0.5f;
	public FaceAlgorithmBase(Context context) {
		super(context);
		loadClassifier(context);
	}
	public boolean loadClassifier(Context context)
	{
         try {
        	 InputStream is = context.getResources().openRawResource(R.raw.haarcascade_frontalface_alt2);
             File cascadeDir = context.getDir("cascade", Context.MODE_PRIVATE);
             File cascadeFile = new File(cascadeDir, "lbpcascade_frontalface2.xml");
             FileOutputStream os = new FileOutputStream(cascadeFile);
             byte[] buffer = new byte[4096];
             int bytesRead;
             while ((bytesRead = is.read(buffer)) != -1) {
                 os.write(buffer, 0, bytesRead);
             }
             is.close();
             os.close();
             mCascade = new CascadeClassifier(cascadeFile.getAbsolutePath());
             if (mCascade.empty()) {
                 Log.e(TAG, "Failed to load cascade classifier");
                 mCascade = null;
             } else
                 Log.i(TAG, "Loaded cascade classifier from " + cascadeFile.getAbsolutePath());

             cascadeFile.delete();
             cascadeDir.delete();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return false;
		}
		return true;
	}
	public Bitmap getBitmap(Mat rgba,Mat gray)
	{
	       if (mCascade != null) {
	            int height = gray.rows();
	            int faceSize = Math.round(height*minFacesize);
	            List<Rect> faces = new LinkedList<Rect>();
	            mCascade.detectMultiScale(gray, faces, 1.1, 2, 2 // TODO: objdetect.CV_HAAR_SCALE_IMAGE
	                    , new Size(faceSize, faceSize));
	            for (Rect r : faces)
	                Core.rectangle(rgba, r.tl(), r.br(), new Scalar(0, 255, 0, 255), 1);
	        }

	        Bitmap bmp = Bitmap.createBitmap(rgba.cols(), rgba.rows(), Bitmap.Config.ARGB_8888);

	        if (Utils.matToBitmap(rgba, bmp))
	            return bmp;

	        bmp.recycle();
	        return null;	
	}
}
